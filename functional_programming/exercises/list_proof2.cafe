mod* TRIV-ERR {
  [Elt Err < Elt&Err]
  op err : -> Err {constr} .
}

mod! LIST (M :: TRIV-ERR) {
  [List]
  op nil : -> List {constr} .
  op _|_ : Elt.M List -> List {constr} .
  op _@_ : List List -> List .
  vars X Y E E2 : Elt.M .
  vars L L1 L2 : List .
  -- _@_
  eq nil @ L = L .
  eq (X | L1) @ L = X | (L1 @ L) .
}

mod! LIST1 {
  pr(LIST)
  -- EQLモジュールのop _=_ にreducttionを追加する
  vars X Y E E2 : Elt.M .
  vars L L1 L2 L3 : List .
  eq (nil = (E | L1) ) = false .
  eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .
  -- reverse operation
  -- simple recursive function
  op rev1 : List -> List .
  eq rev1(nil) = nil . -- (r1-1)
  eq rev1(E | L1) = rev1(L1) @ (E | nil) . -- (r1-2)

  -- tail recurive function
  op rev2 : List -> List .
  op sr2 : List List -> List .
  eq rev2(L1) = sr2(L1,nil) . -- (r2)
  eq sr2(nil,L2) = L2 . -- (sr2-1)
  eq sr2(E | L1,L2) = sr2(L1,E | L2) . -- (sr2-2)
}

mod! LIST2 {.
  pr(LIST1)
  -- enable append associativity
  op _@_ : List List -> List {assoc}.
  vars X Y E E2 : Elt.M .
  vars L L1 L2 : List .
  -- _@_
  eq nil @ L = L .
  eq (X | L1) @ L = X | (L1 @ L) .
}

-- Lemma 2 []
-- rev1(rev1(L1) @ (E | L2)) = rev1((E | L2)) @ L1 
-- Proof of Theorem 1 By structural induction on L1.
-- I. Base case
open LIST2 .
  -- check
  red rev1(rev1(nil) @ (E | L2)) = rev1((E | L2)) @ nil .
close

-- Ⅱ. Inductive case
open LIST2 .
  -- fresh constants
  ops l1 l2 : -> List .
  -- fresh constants
  ops e1 e2 : -> Elt.M .
  -- IH
  eq rev1(rev1(l1) @ (E | L2)) = rev1((E | L2)) @ l1 .
  -- check
  red rev1(rev1((e1 | l1)) @ (e2 | l2)) = rev1((e2 | l2)) @ (e1 | l1) .
close

-- Theorem 3 [reverse of rev1_ ( r1-3 )]
-- rev1(rev1(L)) = L
-- Proof of Theorem 1 By structural induction on L1.
-- I. Base case
open LIST2 .
  -- check
  red rev1(rev1(nil)) = nil .
close

-- Ⅱ. Inductive case
open LIST2 .
  -- fresh constants
  op l1 : -> List .
  -- fresh constants
  op e1 : -> Elt.M .
  -- IH
  eq rev1(rev1((l1))) = l1 .
  -- lemma2
  -- lemmaなので全て変数でeqを書く
  eq rev1(rev1(L) @ (E | L2)) = rev1((E | L2)) @ L .
  -- check
  red rev1(rev1(e1 | l1)) = e1 | l1 .
close

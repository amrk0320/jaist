-- PAIRモジュール
mod! PAIR(FE :: TRIV, SE :: TRIV) {
[Pair]
-- 値を初期化するだけ
op (_,_) : Elt.FE Elt.SE -> Pair {constr} .
}

mod! TRIPLE(FE :: TRIV, SE :: TRIV, TE :: TRIV) {
[Triple]
op (_,_,_) : Elt.FE Elt.SE Elt.TE -> Triple {constr} .
}

-- エラーを返す要素
mod* TRIV-ERR-IF {
[Elt Err < Elt&Err]
op err : -> Err .
op if_then{_}else{_} : Bool Elt&Err Elt&Err -> Elt&Err .
}

-- パラメーターモジュールが２つある
mod! ENTRY(K :: TRIV, V :: TRIV-ERR-IF) {
-- pairをentryに命名変更
pr(PAIR(K,V) * {sort Pair -> Entry})
[Entry ErrEntry < Entry&Err]
-- エラー時の定数
op errEntry : -> ErrEntry {constr} .
-- Vがエラーの場合はエラーハンドリングができる
op (_,_) : Elt.K Elt&Err.V -> Entry&Err .
var K : Elt.K .
-- Vがエラーの場合 => 定数のエラーを返す
eq (K,err.V) = errEntry .
}

mod! BOOL-ERR {
[Bool ErrBool < Bool&Err]
op errBool : -> ErrBool {constr} .
op if_then{_}else{_} : Bool Bool Bool -> Bool .
vars B1 B2 : Bool .
-- if_then{_}else{_}
eq if true then {B1} else {B2} = B1 .
eq if false then {B1} else {B2} = B2 .
}

mod! TRIV-ERR {
 [Elt Err < Elt&Err]
 op err : -> Err .
}

mod! GLIST-ERR(E :: TRIV-ERR) {
 [Nil NnList < List]
 [List ErrList < List&Err]
 op nil : -> Nil {constr} .
 op _|_ : Elt.E List -> List {constr} .
 op errList : -> ErrList {constr} .
 op _|_ : Elt&Err.E List&Err -> List&Err .
 op hd : Nil -> Err.E .
 op hd : NnList -> Elt.E .
 op hd : ErrList -> Err.E .
 op hd : List&Err -> Elt&Err.E .
 op tl : Nil -> ErrList .
 op tl : NnList -> List .
 op tl : ErrList -> ErrList .
 op tl : List&Err -> List&Err .
 op _@_ : List List -> List .
 op _@_ : ErrList List&Err -> ErrList .
 op _@_ : List&Err ErrList -> ErrList .
 op _@_ : List&Err List&Err -> List&Err .
 op if_then{_}else{_} : Bool List&Err List&Err -> List&Err .
 var X : Elt.E .
 var XE : Elt&Err.E .
 vars L L2 : List .
 vars LE LE2 : List&Err .
 eq err.E | LE = errList .
 eq XE | errList = errList .
 eq hd(nil) = err.E .
 eq hd(X | L) = X .
 eq hd(errList) = err.E .
 eq tl(nil) = errList .
 eq tl(X | L) = L .
 eq tl(errList) = errList .
 eq nil @ L2 = L2 .
 eq (X | L) @ L2 = X | (L @ L2) .
 eq errList @ LE = errList .
 eq LE @ errList = errList .
 eq if true then {LE} else {LE2} = LE .
 eq if false then {LE} else {LE2} = LE2 .
}


-- テーブルの実装
mod! TABLE { 
 pr(BOOL-ERR)
 -- 汎用のリスト
 pr(GLIST-ERR(E <= view from TRIV-ERR to ENTRY {
 sort Elt -> Entry, sort Err -> ErrEntry,
 sort Elt&Err -> Entry&Err, op err -> errEntry } 
 )
 * { sort List -> Table,
  sort Nil -> EmpTable,
  sort NnList -> NeTable,
  sort ErrList -> ErrTable,
  sort List&Err -> Table&Err,
  op errList -> errTable,
  op nil -> empTable } )
 vars K K2 : Elt.K .
 vars V V2 : Elt.V . 
 vars VE VE2 : Elt&Err.V .
 var T : Table . 
 var TE : Table&Err .
 -- テーブルの生成
 op singleton : Elt.K Elt.V -> Table .
 op singleton : Elt.K Elt&Err.V -> Table&Err .
 eq singleton(K,err.V) = errTable .
 eq singleton(K,V) = (K,V) | empTable .
 -- 登録
 -- BoolのSortを返す
 op isReg : Table Elt.K -> Bool .
 op isReg : Table&Err Elt.K -> Bool&Err .
 eq isReg(errTable,K2) = errBool .
 eq isReg(empTable,K2) = false .
 eq isReg((K,V) | T,K2) = if K == K2 then {true} else {isReg(T,K2)} .
 -- lookup ペアのリストからVを探して返す
 op lookup : Table Elt.K -> Elt&Err.V .
 op lookup : Table&Err Elt.K -> Elt&Err.V .
 eq lookup(errTable,K2) = err.V .
 eq lookup(empTable,K2) = err.V .
 eq lookup((K,V) | T,K2) = if K == K2 then {V} else {lookup(T,K2)} .
 -- update
 op update : Table Elt.K Elt.V -> Table .
 op update : Table&Err Elt.K Elt&Err.V -> Table&Err .
 eq update(errTable,K2,VE2) = errTable .
 eq update(TE,K2,err.V) = errTable .
 -- nilならTableを生成する
 eq update(empTable,K2,V2) = (K2,V2) | empTable .
 -- keyが見つかったらVをV2に変更してテーブルを返す => 実際はupsert処理
 eq update((K,V) | T,K2,V2)
 = if K == K2 then {(K,V2) | T} else {(K,V) | update(T,K2,V2)} .
 -- insert
 -- 戻りの型はTableじゃだめ？
 op insert : Table Elt.K Elt.V -> Table&Err .

 op insert : Table&Err Elt.K Elt&Err.V -> Table&Err .
 eq insert(errTable,K2,VE) = errTable .
 eq insert(TE,K2,err.V) = errTable .
 -- 要素が登録済みならエラー定数を返す、なければ先頭に入れてTableを返す
 eq insert(T,K2,V2) = if isReg(T,K2) then {errTable} else {(K2,V2) | T} .

 -- remove keyがあれば要素を削除する、なければ何もしない
 op remove : Table Elt.K -> Table .
 op remove : Table&Err Elt.K -> Table&Err .
 eq remove(errTable,K2) = errTable .
 eq remove(empTable,K2) = empTable .
 eq remove((K,V) | T,K2)
 = if K == K2 then {T} else {(K,V) | remove(T,K2)} .
 -- delete 要素がなければエラー(errTable)をかえす
 op delete : Table Elt.K -> Table&Err .
 op delete : Table&Err Elt.K -> Table&Err .
 eq delete(errTable,K2) = errTable .
 eq delete(T,K2)
 = if isReg(T,K2) then {remove(T,K2)} else {errTable} .
}

mod! STRING-ERR principal-sort String {
 pr(STRING)
 [String ErrString < String&Err]
 op errStr : -> ErrString {constr} .
 op if_then{_}else{_} : Bool String&Err String&Err -> String&Err .
 vars SE1 SE2 : String&Err .
 eq if true then {SE1} else {SE2} = SE1 .
 eq if false then {SE1} else {SE2} = SE2 .
}

-- TRIVをQIDに変更する変換
view TRIV2QID from TRIV to QID {
 sort Elt -> Qid
}

view TRIV-ERR-IF2STRING-ERR from TRIV-ERR-IF to STRING-ERR {
 sort Elt -> String,
 sort Err -> ErrString,
 sort Elt&Err -> String&Err,
 op err -> errStr,
 op (if_then{_}else{_}) -> (if_then{_}else{_}),
}

open TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2STRING-ERR) .
 op t : -> Table .
 -- テーブルの固定値の生成
 eq t = update(update(singleton('java,"Java"),'obj,"OBJ3"),'c,"C") .
 red t .
 red isReg(t,'obj) .
 red isReg(t,'mk) .
 red lookup(t,'obj) .
 red lookup(t,'mk) .
 red update(t,'mk,"SML#") .
 red update(t,'obj,"CafeOBJ") .
 red insert(t,'mk,"SML#") .
 red insert(t,'obj,"CafeOBJ") .
 red remove(t,'mk) .
 red remove(t,'obj) .
 red delete(t,'mk) .
 red delete(t,'obj) .
close


-- catalog
-- table
-- itemid : (name,price)
-- ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) | empTable

-- shopping cart
-- list
-- itemid and numbers
-- ('o,4) | ('t,10) | ('o,6) | nil

-- A bill item list
-- triple of a string, a natural number and a natural number.
-- item name, the number of the item to be ordered and the sub‐total for this item,
-- last item is total price.
-- (("orange",10,1000) | ("tomato",10,900) | nil, 1900)

-- なんでprincipal-sortの定義が必要？
mod! NAT-ERR principal-sort Nat {
 pr(NAT)
 [Nat ErrNat < Nat&Err]
 op errNat : -> ErrNat {constr} .
}


-- tag is entry of catalog, name and price
-- ("apple",150)
mod! TAG {
 pr(PAIR(STRING-ERR,NAT-ERR) * {sort Pair -> Tag} )
 [Tag ErrTag < Tag&Err]
 op errTag : -> ErrTag {constr} .
 op (_,_) : String&Err Nat&Err -> Tag&Err .

 op if_then{_}else{_} : Bool Tag&Err Tag&Err -> Tag&Err .
 var SE : String&Err .
 var NE : Nat&Err .
 vars TE1 TE2 : Tag&Err .
 eq (errStr,NE) = errTag . 
 eq (SE,errNat) = errTag .
 -- タグの選択用のif文
 eq if true then {TE1} else {TE2} = TE1 .
 eq if false then {TE1} else {TE2} = TE2 .
}

view TRIV-ERR-IF2TAG from TRIV-ERR-IF to TAG {
 sort Elt -> Tag, 
 sort Err -> ErrTag,
 sort Elt&Err -> Tag&Err, 
 op err -> errTag,
 op (if_then{_}else{_}) -> (if_then{_}else{_}) 
}

-- catalog is table with qid and tag
mod! CATALOG {
 -- pritn and rename
 pr(
  TABLE(K <= TRIV2QID, V <= TRIV-ERR-IF2TAG) * {
 sort Table -> Catalog, sort EmpTable -> EmpCatalog,
 sort NeTable -> NeCatalog, sort ErrTable -> ErrCatalog,
 sort Table&Err -> Catalog&Err, op empTable -> empCatalog,
 op errTable -> errCatalog } ) 
}

open CATALOG .
 op cat : -> Catalog .
 eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) | empCatalog .
 red cat .
close

-- entry of ('o,4) | ('t,10) | ('o,6) | nil
mod! CART-ITEM {
pr(PAIR(QID,NAT-ERR) * {sort Pair -> CItem})
[CItem ErrCItem < CItem&Err]
op errCItem : -> ErrCItem {constr} .
}

-- genericにCART-ITEMを利用する
view TRIV-ERR2CART-ITEM from TRIV-ERR to CART-ITEM {
sort Elt -> CItem,
sort Err -> ErrCItem,
sort Elt&Err -> CItem&Err,
op err -> errCItem,
}

-- cart-itemを代入したgenericのリスト
mod! CART { 
 pr(GLIST-ERR(E <= TRIV-ERR2CART-ITEM) * {
sort List -> Cart, 
sort Nil -> EmpCart,
sort NnList -> NeCart, 
sort ErrList -> ErrCart,
sort List&Err -> Cart&Err, 
op nil -> empCart,
op errList -> errCart } )
op norm : Cart -> Cart .
op mkCart : Cart CItem -> Cart .
vars I I2 : Qid . 
vars N N2 : Nat . 
var C : Cart .
-- norm アイテムごとにユニークにする
eq norm(empCart) = empCart .
eq norm((I,N) | C) = mkCart(norm(C),(I,N)) .
-- mkCart
-- カートに追加
eq mkCart(empCart,(I,N)) = (I,N) | empCart .
eq mkCart((I2,N2) | C,(I,N))
= if I == I2 then {(I,N + N2) | C} else
{(I2,N2) | mkCart(C,(I,N))} .
}

open CART .
 op c : -> Cart .
 eq c = ('o,4) | ('t,10) | ('o,6) | empCart .
 red norm(c) .
close

-- ("orange",10,1000) アイテム名、個数、金額のトリプル
mod! BILL-ITEM { 
 pr(TRIPLE(STRING-ERR,NAT-ERR,NAT-ERR)
* {sort Triple -> BItem})
[BItem ErrBItem < BItem&Err]
 op errBItem : -> ErrBItem {constr} .
 op (_,_,_) : String&Err Nat&Err Nat&Err -> BItem&Err .
 var SE : String&Err . 
 vars NE1 NE2 : Nat&Err .
 eq (errStr,NE1,NE2) = errBItem .
 eq (SE,errNat,NE2) = errBItem .
 eq (SE,NE1,errNat) = errBItem .
}

view TRIV-ERR2BILL-ITEM from TRIV-ERR to BILL-ITEM {
 sort Elt -> BItem,
 sort Err -> ErrBItem,
 sort Elt&Err -> BItem&Err,
 op err -> errBItem 
}

-- (("orange",10,1000) | ("tomato",10,900) | nilBIL, 1900)
-- 最終的な請求(タプル)のリスト
mod! BILIST principal-sort BIList {
pr(GLIST-ERR(E <= TRIV-ERR2BILL-ITEM) * {
sort List -> BIList, sort Nil -> NilBIList, sort NnList -> NnBIList,
sort ErrList -> ErrBIList, sort List&Err -> BIList&Err,
op nil -> nilBIL, op errList -> errBIL, } )
op total : BIList -> Nat .
op total : BIList&Err -> Nat&Err .
var S : String . 
vars N ST : Nat . 
var BIL : BIList .
eq total(errBIL) = errNat .
eq total(nilBIL) = 0 .
-- 請求の合計金額
eq total((S,N,ST) | BIL) = ST + total(BIL) .
}

mod! BILL { 
 pr(CATALOG) 
 pr(CART)
 pr(PAIR(BILIST,NAT-ERR) * {sort Pair -> Bill})
 [Bill ErrBill < Bill&Err]
 op errBill : -> ErrBill {constr} .
 op (_,_) : BIList&Err Nat&Err -> Bill&Err .
 op mkBill : Catalog Cart -> Bill&Err .
 op mkSubBill : BIList&Err -> Bill&Err .
 op mkBIL : Catalog Cart -> BIList&Err .
 op mkSubBIL : Tag&Err Catalog Cart Nat -> BIList&Err .
 var BILE : BIList&Err . var BIL : BIList . var NE : Nat&Err .
 var CAT : Catalog . var I : Qid . vars N P : Nat .
 var IN : String . var C : Cart .
 -- (_,_)
 eq (errBIL,NE) = errBill .
 eq (BILE,errNat) = errBill .
 -- mkBill
 eq mkBill(CAT,C) = mkSubBill(mkBIL(CAT,norm(C))) .
 -- mkSubBill
 eq mkSubBill(errBIL) = errBill .
 eq mkSubBill(BIL) = (BIL,total(BIL)) .
 -- mkBIL
 eq mkBIL(CAT,empCart) = nilBIL .
 eq mkBIL(CAT,(I,N) | C) = mkSubBIL(lookup(CAT,I),CAT,C,N) .
 -- mkSubBIL
 eq mkSubBIL(errTag,CAT,C,N) = errBIL .
 eq mkSubBIL((IN,P),CAT,C,N) = (IN,N,N * P) | mkBIL(CAT,C) .
 }

open BILL .
 op cat : -> Catalog .
 eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) | empCatalog .
 op c : -> Cart .
 eq c = ('o,4) | ('t,10) | ('o,6) | empCart .
 red mkBill(cat,c) .
close

open BILL .
 ops cat cat2 : -> Catalog .
 ops c1 c2 c3 : -> Cart .

 eq cat = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) |
 ('b,("banana",140)) | ('p,("potato",30)) | empCatalog .

 eq cat2 = ('a,("apple",150)) | ('o,("orange",100)) | ('t,("tomato",90)) |
 ('b,("banana",140)) | ('p,("potato",30)) | ('f,("fruit",1)) | empCatalog .

 eq c1 = ('p,3) | ('o,2) | ('a,3) | ('p,10) | ('b,10) | ('o,10) | ('t,20) | empCart .
 eq c2 = ('p,3) | ('o,2) | ('f,10) | ('a,3) | empCart .
 eq c3 = ('p,3) | ('o,2) | ('a,3) | empCart .
 red mkBill(cat,c1) .
 red mkBill(cat,c2) . -- catにfがない
 red mkBill(cat,c3) . -- fをカートから削除
 red mkBill(cat2,c2) . -- fあり
close
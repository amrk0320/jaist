mod! NAT-ERR { 
 pr(NAT)
 [Nat ErrNat < Nat&Err]
 op errNat : -> ErrNat {constr} .
 op p_ : Zero -> ErrNat .
 op p_ : ErrNat -> ErrNat .
 op p_ : Nat&Err -> Nat&Err .
 op _quo_ : Nat&Err Zero -> ErrNat .
 op _quo_ : Nat&Err ErrNat -> ErrNat .
 op _quo_ : ErrNat Nat&Err -> ErrNat .
 op _quo_ : Nat&Err Nat&Err -> Nat&Err .

 var NE : Nat&Err .
 eq p 0 = errNat .
 eq p errNat = errNat .
 eq NE quo 0 = errNat .
 eq NE quo errNat = errNat .
 eq errNat quo NE = errNat .
}

mod! NATLIST { 
-- 外部モジュールの読み込み
pr(NAT)
pr(NAT-ERR)
-- 　connected component の定義
-- なんでこの定義必要？
[Nil NnNatList < NatList]

op nil : -> Nil {constr} .
op _|_ : Nat NatList -> NnNatList {constr} .

-- 型の実装
op hd : Nil -> ErrNat .
op hd : NnNatList -> Nat .
op hd : NatList -> Nat&Err .

var X : Nat .
var Y : Nat .
var L : NatList .
var L2 : NatList .

-- 関数の実装
eq hd(nil) = errNat .
eq hd(X | L) = X .

op tl : NatList -> NatList .
op _@_ : NatList NatList -> NatList .
op [_.._] : Nat Nat -> NatList .
op if_then {_} else {_} : Bool NatList NatList -> NatList .
eq tl(nil) = nil .
eq tl(X | L) = L .
eq nil @ L2 = L2 .


eq (X | L) @ L2 = X | (L @ L2) .
eq [X .. Y] = if X > Y then {nil} else {X | [X + 1 .. Y]} .
eq if true then {L} else {L2} = L .
eq if false then {L} else {L2} = L2 .
}

mod! QSORT {
 -- imports
 pr(NATLIST)
 -- signature
 op qsort : NatList -> NatList .
 op partition : Nat NatList NatList NatList -> NatList .
 -- CafeOBJ vars
 vars X Y : Nat .
 vars L LL RL : NatList .

 -- equations
 -- sort
 eq qsort(nil) = nil .
 eq qsort(X | nil) = X | nil .
 eq qsort(X | Y | L) = partition(X,Y | L,nil,nil) .
 -- partition
 eq partition(X,nil,LL,RL) = qsort(LL) @ (X | qsort(RL)) .
 eq partition(X,Y | L,LL,RL)
 = if Y < X then {partition(X,L,Y | LL,RL)}
 else {partition(X,L,LL,Y | RL)} .
}

open QSORT .
 red qsort(4 | 7 | 5 | 1 | 0 | 3 | 6 | 2 | nil) .
close